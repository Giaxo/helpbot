{"version":3,"sources":["NewEventOverlay.js","DetailsOverlay.js","App.js","index.js"],"names":["registerLocale","it","setDefaultLocale","NewEventOverlay","props","useState","newEventName","setNewEventName","newEventIsWeekly","setNewEventIsWeekly","Date","newEventDate","setNewEventDate","newEventWeekday","setNewEventWeekday","newEventStartTime","setNewEventStartTime","newEventEndTime","setNewEventEndTime","newEventType","setNewEventType","className","style","show","display","src","onClick","onClose","alt","onSubmit","e","type","value","onChange","event","target","id","name","checked","selected","date","dateFormat","locale","onChangeRaw","preventDefault","strictParsing","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","minTime","getTime","maxTime","setHours","setMinutes","eventTypes","map","x","DetailsOverlay","selEvent","title","isWeekly","resource","moment","start","format","startTime","endTime","end","onRemoveClick","localizer","momentLocalizer","ros","ROSLIB","Ros","url","on","console","log","error","App","myEvents","setMyEvents","setEventTypes","currCalendarDate","setCurrCalendarDate","showNewEventOverlay","setShowNewEventOverlay","showDetailsOverlay","setShowDetailsOverlay","selectedEvent","setSelectedEvent","readCalendarClient","Service","serviceType","readTypesClient","addEventClient","removeEventClient","weekDaysList","updateEvents","view","length","currYear","currMonth","readRequest","ServiceRequest","year","month","callService","result","completeCalendar","JSON","parse","calendar","dailyCalendar","daily","weeklyCalendar","weekly","newEventsArray","keyDay","currDay","keyEvent","currEvent","newEvent","toDate","push","dayNum","allCurrWeekdays","RRule","freq","WEEKLY","interval","byweekday","dtstart","UTC","parseInt","until","all","nextDate","readTypesRequest","types","newEventOverlayToggle","detailsOverlayToggle","useEffect","events","views","messages","allDay","previous","next","today","week","day","agenda","time","showMore","total","onNavigate","onSelectEvent","newDate","addRequest","stringify","resultCode","getDay","removeRequest","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5302f904.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport DatePicker from 'react-datepicker'\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { registerLocale, setDefaultLocale } from  \"react-datepicker\";\nimport it from 'date-fns/locale/it'\nimport setHours from \"date-fns/setHours\";\nimport setMinutes from \"date-fns/setMinutes\";\n\nimport './NewEventOverlay.css'\n\nregisterLocale('it', it)\nsetDefaultLocale('it');\n\nfunction NewEventOverlay(props) {\n\n  const [newEventName, setNewEventName] = useState(\"\");\n  const [newEventIsWeekly, setNewEventIsWeekly] = useState(false);\n  const [newEventDate, setNewEventDate] = useState(new Date());\n  const [newEventWeekday, setNewEventWeekday] = useState(\"0\");\n  const [newEventStartTime, setNewEventStartTime] = useState(new Date());\n  const [newEventEndTime, setNewEventEndTime] = useState(new Date());\n  const [newEventType, setNewEventType] = useState(\"Promemoria\");\n\n\n  return (\n    <div className=\"new-event-overlay\" style={props.show?{}:{display: 'none'}}>\n        <div className=\"new-event-overlay-content\">\n          <img className=\"new-event-overlay-close\" src=\"plus.png\" onClick={props.onClose} alt=\"close overlay plus\" />\n          \n          <form className=\"new-event-overlay-form\" onSubmit={(e)=>props.onSubmit(e, newEventName, newEventIsWeekly, newEventDate, newEventWeekday, newEventStartTime, newEventEndTime, newEventType)}>\n            <div className=\"new-event-overlay-input\">\n              <div className=\"new-event-overlay-label\">\n                Nome evento:\n              </div>\n              <input className=\"new-event-overlay-text\" type=\"text\" value={newEventName} onChange={(event) => {setNewEventName(event.target.value)}} />\n            </div>\n            <div className=\"new-event-overlay-input\">\n              <label className=\"new-event-overlay-label\">\n              <input type=\"checkbox\" id=\"isWeekly\" name=\"newEventIsWeekly\" checked={newEventIsWeekly} onChange={(event)=>{setNewEventIsWeekly(event.target.checked)}}/>\n                Settimanale\n              </label>\n            </div>\n            <div className=\"new-event-overlay-input\">\n              <div className=\"new-event-overlay-label\">\n                Seleziona il giorno:\n              </div>\n              <div style={newEventIsWeekly?{display: 'none'}:{}}>\n                <DatePicker\n                  className=\"new-event-overlay-datepicker\"\n                  selected={newEventDate}\n                  onChange={(date) => setNewEventDate(date)}\n                  dateFormat=\"dd/MM/yyyy\"\n                  locale=\"it\"\n                  onChangeRaw={(e)=>{e.preventDefault()}}\n                  strictParsing\n                />\n              </div>\n              <select className=\"new-event-overlay-select\" name=\"newEventWeekday\" id=\"newEventWeekday\" value={newEventWeekday} onChange={(event)=>{setNewEventWeekday(event.target.value)}} style={newEventIsWeekly?{}:{display: 'none'}}>\n                <option value=\"0\">Lunedì</option>\n                <option value=\"1\">Martedì</option>\n                <option value=\"2\">Mercoledì</option>\n                <option value=\"3\">Giovedì</option>\n                <option value=\"4\">Venerdì</option>\n                <option value=\"5\">Sabato</option>\n                <option value=\"6\">Domenica</option>\n              </select>\n            </div>\n            <div className=\"new-event-overlay-input\">\n              <div className=\"new-event-overlay-label\">\n                Seleziona l'ora iniziale:\n              </div>\n              <DatePicker\n                className=\"new-event-overlay-datepicker\"\n                selected={newEventStartTime}\n                onChange={(date) => setNewEventStartTime(date)}\n                locale=\"it\"\n                showTimeSelect\n                showTimeSelectOnly\n                timeIntervals={5}\n                timeCaption=\"Time\"\n                dateFormat=\"HH:mm\"\n                onChangeRaw={(e)=>{e.preventDefault()}}\n                strictParsing\n              />\n            </div>\n            <div className=\"new-event-overlay-input\">\n              <div className=\"new-event-overlay-label\">\n                Seleziona l'ora finale:\n              </div>\n              <DatePicker\n                className=\"new-event-overlay-datepicker\"\n                selected={newEventEndTime}\n                onChange={(date) => setNewEventEndTime(date)}\n                locale=\"it\"\n                showTimeSelect\n                showTimeSelectOnly\n                timeIntervals={5}\n                minTime={newEventStartTime.getTime()}\n                maxTime={setHours(setMinutes(new Date(), 59), 23)}\n                timeCaption=\"Time\"\n                dateFormat=\"HH:mm\"\n                onChangeRaw={(e)=>{e.preventDefault()}}\n                strictParsing\n              />\n            </div>\n            <div className=\"new-event-overlay-input\">\n              <div className=\"new-event-overlay-label\">\n                Seleziona il tipo:\n              </div>\n              <select className=\"new-event-overlay-select\" name=\"newEventType\" id=\"newEventType\" value={newEventType} onChange={(event)=>{setNewEventType(event.target.value)}}>\n                {props.eventTypes.map(x => <option key={x} value={x}>{x}</option>)}\n              </select>\n            </div>\n            <input className=\"new-event-overlay-submit\" type=\"submit\" value=\"Crea evento\" />\n          </form>\n\n        </div>\n      </div>\n  );\n}\n\nexport default NewEventOverlay;","import React from 'react'\n\nimport moment from 'moment'\nimport 'moment/locale/it';\n\nimport './DetailsOverlay.css'\n\nfunction DetailsOverlay(props) {\n\n  var selEvent = props.selEvent\n\n  if (selEvent!=null) {\n\n    var name = selEvent.title\n    var isWeekly = selEvent.resource.isWeekly\n    var date\n    if (isWeekly) {\n      date = moment(selEvent.start).format(\"dddd\")\n    } else {\n      date = moment(selEvent.start).format(\"DD MMMM YYYY\")\n    }\n    var startTime = moment(selEvent.start).format(\"HH:mm\")\n    var endTime = moment(selEvent.end).format(\"HH:mm\")\n    var type = selEvent.resource.type\n\n    return (\n      <div className=\"details-overlay\" style={props.show?{}:{display: 'none'}}>\n          <div className=\"details-overlay-content\">\n            <img className=\"details-overlay-close\" src=\"plus.png\" onClick={props.onClose} alt=\"close overlay plus\" />\n            \n            <div className=\"details-overlay-details\">\n              <div className=\"details-overlay-label\">\n                Nome evento:\n                <div className=\"details-overlay-info\">\n                  {name}\n                </div>\n              </div>\n              <div className=\"details-overlay-label\">\n                Data:\n                <div className=\"details-overlay-info\">\n                  {date}\n                </div>\n              </div>\n              <div className=\"details-overlay-label\">\n                Ora:\n                <div className=\"details-overlay-info\">\n                  {startTime} - {endTime}\n                </div>\n              </div>\n              <div className=\"details-overlay-label\">\n                Tipo evento:\n                <div className=\"details-overlay-info\">\n                  {type}\n                </div>\n              </div>\n              <div className=\"details-overlay-remove-button\" onClick={()=>{props.onRemoveClick(selEvent)}}>\n                Elimina {isWeekly?'ogni '+date:''}\n              </div>\n            </div>\n\n          </div>\n        </div>\n    );\n\n  } else {\n    return null;\n  }\n}\n\nexport default DetailsOverlay;","import React, { useState, useEffect } from 'react'\n\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport moment from 'moment'\nimport 'moment/locale/it';\n\nimport { RRule } from 'rrule'\n\nimport ROSLIB from 'roslib'\n\nimport './App.css';\nimport NewEventOverlay from './NewEventOverlay'\nimport DetailsOverlay from './DetailsOverlay'\n\nconst localizer = momentLocalizer(moment)\n\nvar ros = new ROSLIB.Ros({\n  url : 'ws://192.168.1.66:9090'\n});\n\nros.on('connection', function() {\n  console.log('Connected to websocket server.');\n});\n\nros.on('error', function(error) {\n  console.log('Error connecting to websocket server: ', error);\n});\n\nros.on('close', function() {\n  console.log('Connection to websocket server closed.');\n});\n\nfunction App() {\n\n  const [myEvents, setMyEvents] = useState([])\n  const [eventTypes, setEventTypes] = useState([])\n  const [currCalendarDate, setCurrCalendarDate] = useState(new Date())\n  const [showNewEventOverlay, setShowNewEventOverlay] = useState(false)\n  const [showDetailsOverlay, setShowDetailsOverlay] = useState(false)\n  const [selectedEvent, setSelectedEvent] = useState(null)\n  \n  var readCalendarClient = new ROSLIB.Service({\n    ros : ros,\n    name : '/read_calendar',\n    serviceType : 'helpbot/ReadCalendar'\n  })\n\n  var readTypesClient = new ROSLIB.Service({\n    ros : ros,\n    name : '/read_types',\n    serviceType : 'helpbot/ReadTypes'\n  })\n\n  var addEventClient = new ROSLIB.Service({\n    ros : ros,\n    name : '/add_event',\n    serviceType : 'helpbot/AddEvent'\n  })\n\n  var removeEventClient = new ROSLIB.Service({\n    ros : ros,\n    name : '/remove_event',\n    serviceType : 'helpbot/RemoveEvent'\n  })\n\n  const weekDaysList = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\n  const messages = {\n    allDay: 'Giorno',\n    previous: 'Precedente',\n    next: 'Successivo',\n    today: 'Oggi',\n    month: 'Mese',\n    week: 'Settimana',\n    day: 'Giorno',\n    agenda: 'Agenda',\n    date: 'Data',\n    time: 'Ora',\n    event: 'Evento',\n    showMore: total => `+ ${total} altri eventi`\n  }\n\n  //Reads events from ROS calendar\n  function updateEvents(date, view) {\n\n    setCurrCalendarDate(date)\n\n    myEvents.length=0\n\n    let currYear = moment(date).format(\"YYYY\")\n    let currMonth = moment(date).format(\"MM\")\n\n    let readRequest = new ROSLIB.ServiceRequest({\n      year : currYear,\n      month : currMonth\n    })\n\n    readCalendarClient.callService(readRequest, function(result) {\n\n      let completeCalendar = JSON.parse(result.calendar)\n      let dailyCalendar = completeCalendar.daily\n      let weeklyCalendar = completeCalendar.weekly\n      //console.log(dailyCalendar)\n\n      let newEventsArray = []\n      //Load events from daily calendar\n      for (let keyDay in dailyCalendar) {\n        let currDay = dailyCalendar[keyDay]\n        //console.log(currDay)\n        for (let keyEvent in currDay) {\n          let currEvent = currDay[keyEvent]\n          let newEvent = {}\n          newEvent[\"start\"] = moment(currYear+\"-\"+currMonth+\"-\"+keyDay+\" \"+currEvent[\"startTime\"][0]+\":\"+currEvent[\"startTime\"][1]).toDate()\n          newEvent[\"end\"] = moment(currYear+\"-\"+currMonth+\"-\"+keyDay+\" \"+currEvent[\"endTime\"][0]+\":\"+currEvent[\"endTime\"][1]).toDate()\n          newEvent[\"title\"] = currEvent[\"name\"]\n          newEvent[\"resource\"] = {\"type\":currEvent[\"type\"],\"isWeekly\":false}\n          newEventsArray.push(newEvent)\n        }\n      }\n\n      //Load events from weekly calendar\n      let dayNum = 0\n      for (let keyDay in weeklyCalendar) {\n        let currDay = weeklyCalendar[keyDay]\n        \n        let rule = new RRule({\n          freq: RRule.WEEKLY,\n          interval: 1,\n          byweekday: dayNum,\n          dtstart: new Date(Date.UTC(parseInt(currYear), parseInt(currMonth)-1, 1)),\n          until: new Date(Date.UTC(parseInt(currYear), parseInt(currMonth), 0))\n        })\n        let allCurrWeekdays = rule.all()\n\n        for (let keyEvent in currDay) {\n          for (let nextDate of allCurrWeekdays) {\n            //console.log(nextDate)\n            let currEvent = currDay[keyEvent]\n            let newEvent = {}\n            newEvent[\"start\"] = new Date(nextDate.setHours(currEvent[\"startTime\"][0], currEvent[\"startTime\"][1]))\n            newEvent[\"end\"] = new Date(nextDate.setHours(currEvent[\"endTime\"][0], currEvent[\"endTime\"][1]))\n            newEvent[\"title\"] = currEvent[\"name\"]\n            newEvent[\"resource\"] = {\"type\":currEvent[\"type\"],\"isWeekly\":true}\n            newEventsArray.push(newEvent)\n          }\n        }\n        dayNum+=1\n      }\n      setMyEvents(newEventsArray);\n\n      //Read event types\n      let readTypesRequest = new ROSLIB.ServiceRequest()\n      readTypesClient.callService(readTypesRequest, function(result) {\n        setEventTypes(JSON.parse(result.types))\n      })\n\n    }, function(error) {\n      console.log('NO SERVICE CONNECTION')\n    })\n  }\n\n  //Add new event to ROS calendar\n  function handlerNewEventSubmit(event, newEventName, newEventIsWeekly, newEventDate, newEventWeekday, newEventStartTime, newEventEndTime, newEventType) {\n\n    event.preventDefault()\n    \n    if (newEventName!==\"\" && newEventDate!==null && newEventStartTime!==null && newEventEndTime!==null) {\n\n      setShowNewEventOverlay(false)\n\n      let newEvent = {\n        name : newEventName,\n        startTime : [moment(newEventStartTime).format(\"HH\"), moment(newEventStartTime).format(\"mm\")],\n        endTime : [moment(newEventEndTime).format(\"HH\"), moment(newEventEndTime).format(\"mm\")],\n        type : newEventType\n      }\n      let newDate\n      if (newEventIsWeekly) {\n        newDate = weekDaysList[newEventWeekday]\n      } else {\n        newDate = {\n          year : moment(newEventDate).format(\"YYYY\"),\n          month : moment(newEventDate).format(\"MM\"),\n          day : moment(newEventDate).format(\"DD\")\n        }\n      }\n      let addRequest = new ROSLIB.ServiceRequest({\n        \"event\" : JSON.stringify(newEvent),\n        \"date\" : JSON.stringify(newDate),\n        \"isWeekly\" : newEventIsWeekly\n      })\n\n      addEventClient.callService(addRequest, function(result) {\n        if(result.resultCode===\"0\") {\n          updateEvents(currCalendarDate)\n        } else {\n          console.log(\"ERROR IN ADD EVENT SERVICE CALL\")\n        }\n      })\n\n    }\n  }\n\n  //Toggle visibility of the new event overlay\n  function newEventOverlayToggle() {\n    setShowNewEventOverlay(!showNewEventOverlay)\n  }\n\n  //Handler for the onSelect event in the calendar\n  function handlerOnSelectEvent(selEvent, e) {\n    setSelectedEvent(selEvent)\n    detailsOverlayToggle()\n  }\n\n  //Toggle visibility of the details overlay\n  function detailsOverlayToggle() {\n    setShowDetailsOverlay(!showDetailsOverlay)\n  }\n\n  //Remove event from ros calendar\n  function handlerRemoveEvent(event) {\n\n    setShowDetailsOverlay(false)\n\n    let name = event.title\n    let isWeekly = event.resource.isWeekly\n\n    let date\n    if (isWeekly) {\n      date = weekDaysList[(event.start.getDay()+6)%7]\n    } else {\n      date = {\n        year : moment(event.start).format(\"YYYY\"),\n        month : moment(event.start).format(\"MM\"),\n        day : moment(event.start).format(\"DD\")\n      }\n    }\n\n    let removeRequest = new ROSLIB.ServiceRequest({\n      \"eventName\" : name,\n      \"date\" : JSON.stringify(date),\n      \"isWeekly\" : isWeekly\n    })\n    removeEventClient.callService(removeRequest, function(result) {\n      if(result.resultCode===\"0\") {\n        updateEvents(currCalendarDate)\n      } else {\n        console.log(\"ERROR IN REMOVE EVENT SERVICE CALL\")\n      }\n    })\n  }\n\n  //Update events when page loads\n  useEffect(()=>{\n    updateEvents(moment().toDate())\n  }, [])\n\n  //DEBUG\n  //useEffect(()=>{\n  //  console.log(\"EVENTI: \"+myEvents)\n  //})\n\n  return (\n\n    <div className=\"App\">\n      <div className=\"calendar-header\">\n        <div className=\"new-event-button\" onClick={newEventOverlayToggle}>\n          <img className=\"new-event-plus\" src=\"plus.png\" alt=\"add avent plus\" />\n          Nuovo evento\n        </div>\n      </div>\n      <div className=\"calendar-container\">\n        <Calendar\n          localizer={localizer}\n          events={myEvents}\n          views={['month', 'day', 'agenda']}\n          messages={messages}\n          onNavigate={updateEvents}\n          onSelectEvent={handlerOnSelectEvent}\n        />\n      </div>\n      <NewEventOverlay\n        show={showNewEventOverlay}\n        onSubmit={handlerNewEventSubmit}\n        onClose={newEventOverlayToggle}\n        eventTypes={eventTypes}\n      />\n      <DetailsOverlay \n        show={showDetailsOverlay}\n        onRemoveClick={handlerRemoveEvent}\n        onClose={detailsOverlayToggle}\n        selEvent={selectedEvent}\n      />\n    </div>\n\n  );\n}\n\nexport default App;\n\n//TODO\n//Implement remove event\n//Get ros ip from external file or setup proxy","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}